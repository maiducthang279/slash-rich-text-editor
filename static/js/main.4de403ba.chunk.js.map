{"version":3,"sources":["example.png","../../src/components/SelectBlockTag.tsx","../../src/Util.tsx","../../src/components/EditableBlock.tsx","../../src/components/EditablePage.tsx","App.tsx","index.tsx"],"names":["module","exports","allowedTags","id","tag","label","SelectBlockTag","position","onSelect","close","useState","command","setCommand","tagList","setTagList","selectedTag","setSelectedTag","x","positionAttributes","top","y","MENU_HEIGHT","left","useEffect","matchSorter","keys","handleKeyDown","e","key","preventDefault","newSelectedTag","length","slice","ctrlKey","shiftKey","metaKey","document","addEventListener","removeEventListener","React","className","styles","style","map","item","indexOf","role","tabIndex","onClick","uid","Date","now","toString","Math","random","substring","setCaretToEnd","element","range","createRange","selection","window","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","focus","useContentEditableValue","defaultValue","value","setValue","valueRef","useRef","val","current","Function","EditableBlock","initialHtml","initialTag","updatePage","addBlock","deleteBlock","contentEditable","html","setHtml","getCurrentHtml","setTag","setHtmlBackup","getCurrentHtmlBackup","setPreviousKey","getCurrentPreviousKey","selectMenuIsOpen","setSelectedMenuIsOpen","getCurrentSelectMenuIsOpen","selectMenuPosition","setSelectMenuPosition","ref","closeSelectMenuHandler","openSelectMenuHandler","fromStart","isSupported","rangeCount","getRangeAt","cloneRange","rect","getClientRects","getCaretCoordinates","Fragment","ContentEditable","innerRef","tagName","placeholder","onChange","target","onKeyDown","onKeyUp","INITIAL_BLOCK","blocks","setBlocks","currentBlockRef","previousBlockRef","isMouseDown","mouseOverTarget","useLayoutEffect","currentBlock","find","nextElementSibling","previousBlock","handlerMouseDown","handlerMouseUp","handlerMouseMove","ev","updatePageHandler","useCallback","updatedBlock","block","index","updatedBlocks","addBlockHandler","currentBlocks","newBlock","b","splice","deleteBlockHandler","previousElementSibling","App","width","src","exampleImage","alt","result","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4de403ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/example.eb8e7779.png\";","import { matchSorter } from 'match-sorter'\nimport React, { useEffect, useState } from 'react'\n\nimport styles from '../styles.module.css'\n\nconst MENU_HEIGHT = 150\nconst allowedTags = [\n  {\n    id: 'page-title',\n    tag: 'h1',\n    label: 'Page Title'\n  },\n  {\n    id: 'heading',\n    tag: 'h2',\n    label: 'Heading'\n  },\n  {\n    id: 'subheading',\n    tag: 'h3',\n    label: 'Subheading'\n  },\n  {\n    id: 'paragraph',\n    tag: 'p',\n    label: 'Paragraph'\n  }\n]\n\ntype SelectBlockTagProps = {\n  position: { x: number; y: number }\n  onSelect: Function\n  close: Function\n}\n\nconst SelectBlockTag = ({ position, onSelect, close }: SelectBlockTagProps) => {\n  const [command, setCommand] = useState('')\n  const [tagList, setTagList] = useState(allowedTags)\n  const [selectedTag, setSelectedTag] = useState(0)\n  const x = position.x\n  const y =\n    position.y - MENU_HEIGHT > 0\n      ? position.y - MENU_HEIGHT\n      : position.y + MENU_HEIGHT / 5\n\n  const positionAttributes = { top: y, left: x }\n\n  useEffect(() => {\n    setSelectedTag(0)\n    setTagList(matchSorter(allowedTags, command, { keys: ['tag', 'label'] }))\n  }, [command])\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === 'Enter') {\n        e.preventDefault()\n        if (tagList[selectedTag]?.tag) {\n          onSelect(tagList[selectedTag].tag)\n        }\n      } else if (e.key === 'Tab' || e.key === 'ArrowDown') {\n        e.preventDefault()\n        const newSelectedTag =\n          selectedTag === tagList.length - 1 ? 0 : selectedTag + 1\n        setSelectedTag(newSelectedTag)\n      } else if (e.key === 'ArrowUp') {\n        e.preventDefault()\n        const newSelectedTag =\n          selectedTag === 0 ? tagList.length - 1 : selectedTag - 1\n        setSelectedTag(newSelectedTag)\n      } else if (e.key === 'Backspace') {\n        if (command) {\n          setCommand(command.slice(0, -1))\n        } else {\n          close()\n        }\n      } else if (!e.ctrlKey && !e.shiftKey && !e.metaKey) {\n        setCommand(command + e.key)\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown)\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [tagList, selectedTag])\n  return (\n    <div className={styles.selectMenu} style={positionAttributes}>\n      <div className={styles.items}>\n        {tagList.map((item, key) => {\n          return (\n            <div\n              className={\n                tagList.indexOf(item) === selectedTag ? styles.selected : ''\n              }\n              key={key}\n              role='button'\n              tabIndex={0}\n              onClick={() => onSelect(item.tag)}\n            >\n              <p className={styles.label}>{item.label}</p>\n              <p className={styles.tag}>\n                <i>{item.tag}</i>\n              </p>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default SelectBlockTag\n","export const uid = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substring(2)\n}\n\nexport const getCaretCoordinates = (fromStart = true) => {\n  let x, y\n  const isSupported = typeof window.getSelection !== 'undefined'\n  if (isSupported) {\n    const selection = window.getSelection()\n\n    if (selection && selection.rangeCount !== 0) {\n      const range = selection.getRangeAt(0).cloneRange()\n      range.collapse(!!fromStart)\n      const rect = range.getClientRects()[0]\n      if (rect) {\n        x = rect.left\n        y = rect.top\n      }\n    }\n  }\n\n  return { x, y }\n}\n\nexport const setCaretToEnd = (element: HTMLElement) => {\n  const range = document.createRange()\n  const selection = window.getSelection()\n  range.selectNodeContents(element)\n  range.collapse(false)\n  selection?.removeAllRanges()\n  selection?.addRange(range)\n  element.focus()\n}\n\nexport const setAllCaret = (element: HTMLElement) => {\n  const range = document.createRange()\n  const selection = window.getSelection()\n  range.selectNodeContents(element)\n  // range.collapse(false);\n  selection?.removeAllRanges()\n  selection?.addRange(range)\n  element.focus()\n}\n\n// export const moveCaret = () => {\n//   const selection = window.getSelection();\n//   const range = selection?.getRangeAt(0);\n//   console.log(selection, range);\n//   const offset = range?.startOffset\n//   const [container, currentOffset] = getCaretPos(\n//     range?.commonAncestorContainer || null,\n//     offset || 0,\n//   );\n// };\n\n// const getCaretPos = (\n//   container: Node | null,\n//   offset: number,\n//   prevContainer?: Node,\n// ): [Node | null, number] => {\n//   if (\n//     container?.nodeType === Node.ELEMENT_NODE &&\n//     (container as HTMLElement).className.includes('block')\n//   ) {\n//     let currentOffset = offset;\n//     return [container, currentOffset];\n//   } else if (container != null) {\n//     let currentOffset = offset;\n//     if (prevContainer) {\n//       container.childNodes.\n//     }\n//     return getCaretPos(container.parentNode, currentOffset);\n//   } else {\n//     return [null, 0];\n//   }\n// };\n","import React, {\n  KeyboardEvent,\n  SetStateAction,\n  useEffect,\n  useRef,\n  useState\n} from 'react'\nimport ContentEditable, { ContentEditableEvent } from 'react-contenteditable'\nimport { BlockModel } from './EditablePage'\nimport SelectBlockTag from './SelectBlockTag'\nimport { getCaretCoordinates, setCaretToEnd } from '../Util'\n\nimport styles from '../styles.module.css'\n\nexport type EditableBlockProps = {\n  id: string\n  initialHtml: string\n  initialTag: string\n  updatePage: (params: BlockModel) => void\n  addBlock: (params: Partial<BlockModel>) => void\n  deleteBlock: (params: Partial<BlockModel>) => void\n}\n\nconst useContentEditableValue = <T,>(\n  defaultValue: T\n): [T, React.Dispatch<React.SetStateAction<T>>, Function] => {\n  const [value, setValue] = useState(defaultValue)\n  const valueRef = useRef(defaultValue)\n\n  const setValueHandler: React.Dispatch<React.SetStateAction<T>> = (\n    val: SetStateAction<T>\n  ) => {\n    valueRef.current = val instanceof Function ? val(valueRef.current) : val\n    return setValue(valueRef.current)\n  }\n\n  const getCurrentValue = () => valueRef.current\n\n  return [value, setValueHandler, getCurrentValue]\n}\n\nconst EditableBlock = ({\n  id,\n  initialHtml,\n  initialTag,\n  updatePage,\n  addBlock,\n  deleteBlock\n}: EditableBlockProps) => {\n  const contentEditable = useRef<HTMLElement>(null)\n  const [html, setHtml, getCurrentHtml] = useContentEditableValue('')\n  const [tag, setTag] = useState('p')\n  const [, setHtmlBackup, getCurrentHtmlBackup] = useContentEditableValue('')\n  const [, setPreviousKey, getCurrentPreviousKey] = useContentEditableValue('')\n  const [selectMenuIsOpen, setSelectedMenuIsOpen, getCurrentSelectMenuIsOpen] =\n    useContentEditableValue(false)\n  const [selectMenuPosition, setSelectMenuPosition] = useState<{\n    x: number\n    y: number\n  } | null>(null)\n\n  useEffect(() => {\n    setHtml(initialHtml)\n    setTag(initialTag)\n  }, [])\n\n  useEffect(() => {\n    updatePage({\n      id,\n      html,\n      tag,\n      ref: contentEditable.current\n    })\n  }, [html, tag])\n\n  useEffect(() => {\n    if (contentEditable.current) {\n      setCaretToEnd(contentEditable.current)\n      closeSelectMenuHandler()\n    }\n  }, [tag])\n\n  const onChangeHandler = (e: ContentEditableEvent) => {\n    setHtml(e.target.value)\n  }\n\n  const onKeyUpHandler = (e: KeyboardEvent) => {\n    if (e.key === 'Shift') {\n      setPreviousKey('')\n    }\n    if (e.key === '/') {\n      openSelectMenuHandler()\n    }\n  }\n\n  const onKeyDownHandler = (e: KeyboardEvent) => {\n    let key = e.key\n    if (key === '/') {\n      setHtmlBackup(getCurrentHtml())\n    }\n    if (key === 'Backspace' && !getCurrentHtml()) {\n      e.preventDefault()\n      deleteBlock({\n        id: id,\n        ref: contentEditable.current\n      })\n    }\n    if (key === 'Enter') {\n      if (getCurrentSelectMenuIsOpen()) {\n        e.preventDefault()\n      } else if (getCurrentPreviousKey() !== 'Shift') {\n        e.preventDefault()\n        addBlock({\n          id: id,\n          ref: contentEditable.current\n        })\n      } else {\n        key = 'Shift'\n      }\n    }\n    setPreviousKey(key)\n  }\n\n  const openSelectMenuHandler = () => {\n    const { x, y } = getCaretCoordinates()\n    setSelectedMenuIsOpen(true)\n    setSelectMenuPosition({ x: x || 0, y: y || 0 })\n    document.addEventListener('click', closeSelectMenuHandler)\n  }\n\n  const closeSelectMenuHandler = () => {\n    setHtmlBackup(getCurrentHtmlBackup())\n    setSelectedMenuIsOpen(false)\n    setSelectMenuPosition(null)\n    document.removeEventListener('click', closeSelectMenuHandler)\n  }\n\n  const tagSelectionHandler = (tag: string) => {\n    setTag(tag)\n    setHtml(getCurrentHtmlBackup())\n  }\n\n  return (\n    <React.Fragment>\n      {selectMenuIsOpen && selectMenuPosition && (\n        <SelectBlockTag\n          position={selectMenuPosition}\n          onSelect={tagSelectionHandler}\n          close={closeSelectMenuHandler}\n        />\n      )}\n      <ContentEditable\n        id={id}\n        className={styles.block}\n        innerRef={contentEditable}\n        html={html}\n        tagName={tag}\n        placeholder=\"Type '/' for command\"\n        onChange={onChangeHandler}\n        onKeyDown={onKeyDownHandler}\n        onKeyUp={onKeyUpHandler}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default EditableBlock\n","import React, {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState\n} from 'react'\nimport EditableBlock from './EditableBlock'\nimport { setCaretToEnd, uid } from '../Util'\n\nimport styles from '../styles.module.css'\n\nexport type BlockModel = {\n  id: string\n  tag: string\n  html: string\n  ref?: HTMLElement | null\n}\n\nconst INITIAL_BLOCK: BlockModel = { id: uid(), html: '', tag: 'p', ref: null }\n\ntype EditablePageProps = {\n  value?: BlockModel[]\n  onChange?: Function\n}\n\nconst EditablePage = ({\n  value = [INITIAL_BLOCK],\n  // eslint-disable-next-line no-void\n  onChange = () => void 0\n}: EditablePageProps) => {\n  const [blocks, setBlocks] = useState(value)\n  const currentBlockRef = useRef<Partial<BlockModel> | null>(null)\n  const previousBlockRef = useRef<Element | null>(null)\n  const isMouseDown = useRef(false)\n  const mouseOverTarget = useRef<EventTarget | null>(null)\n\n  useLayoutEffect(() => {\n    const currentBlock = blocks.find(\n      ({ id }) => id === currentBlockRef?.current?.id\n    )?.ref?.nextElementSibling as HTMLElement\n\n    const previousBlock = previousBlockRef.current as HTMLElement\n    if (currentBlock) {\n      currentBlock.focus()\n      currentBlockRef.current = null\n    }\n    if (previousBlock) {\n      previousBlock.focus()\n      setCaretToEnd(previousBlock)\n      previousBlockRef.current = null\n    }\n    onChange(blocks)\n  }, [blocks])\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handlerMouseDown)\n    document.addEventListener('mouseup', handlerMouseUp)\n    document.addEventListener('mousemove', handlerMouseMove)\n    return () => {\n      document.removeEventListener('mousedown', handlerMouseDown)\n      document.removeEventListener('mouseup', handlerMouseUp)\n      document.removeEventListener('mousemove', handlerMouseMove)\n    }\n  }, [])\n\n  const handlerMouseDown = () => {\n    isMouseDown.current = true\n  }\n  const handlerMouseUp = () => {\n    isMouseDown.current = false\n  }\n  const handlerMouseMove = (ev: MouseEvent) => {\n    if (isMouseDown.current && ev.target !== mouseOverTarget.current) {\n      mouseOverTarget.current = ev.target\n    }\n  }\n\n  const updatePageHandler = useCallback(\n    (updatedBlock: BlockModel) => {\n      currentBlockRef.current = null\n      const block = blocks.find(({ id }) => id === updatedBlock.id)\n      if (block) {\n        const index = blocks.indexOf(block)\n        const updatedBlocks = [...blocks]\n        updatedBlocks[index] = {\n          ...updatedBlocks[index],\n          tag: updatedBlock.tag,\n          html: updatedBlock.html,\n          ref: updatedBlock.ref\n        }\n        setBlocks(updatedBlocks)\n      }\n    },\n    [blocks]\n  )\n\n  const addBlockHandler = (currentBlock: Partial<BlockModel>) => {\n    setBlocks((currentBlocks) => {\n      const newBlock = { id: uid(), html: '', tag: 'p', ref: null }\n      const index = currentBlocks.map((b) => b.id).indexOf(currentBlock.id!)\n      const updatedBlocks = [...currentBlocks]\n      updatedBlocks.splice(index + 1, 0, newBlock)\n\n      currentBlockRef.current = currentBlock\n      return updatedBlocks\n    })\n  }\n\n  const deleteBlockHandler = (currentBlock: Partial<BlockModel>) => {\n    setBlocks((currentBlocks) => {\n      const previousBlock = currentBlock?.ref?.previousElementSibling\n      if (currentBlocks.length > 1 && previousBlock) {\n        previousBlockRef.current = previousBlock\n\n        const index = currentBlocks.map((b) => b.id).indexOf(currentBlock.id!)\n        const updatedBlocks = [...currentBlocks]\n        updatedBlocks.splice(index, 1)\n        return updatedBlocks\n      }\n      return currentBlocks\n    })\n  }\n\n  return (\n    <div className={styles.page}>\n      {blocks.map((block, key) => {\n        return (\n          <EditableBlock\n            key={key}\n            id={block.id}\n            initialTag={block.tag}\n            initialHtml={block.html}\n            updatePage={updatePageHandler}\n            addBlock={addBlockHandler}\n            deleteBlock={deleteBlockHandler}\n          />\n        )\n      })}\n    </div>\n  )\n}\n\nexport default EditablePage\n","import React, { useState } from 'react'\n\nimport EditablePage, { BlockModel } from 'slash-rich-text-editor'\nimport 'slash-rich-text-editor/dist/index.css'\n\nimport exampleImage from './example.png'\n\nconst App = () => {\n  const [value, setValue] = useState<BlockModel[]>([\n    { id: 'default', html: 'This is a title', tag: 'h1', ref: null },\n    { id: 'default1', html: 'This is a heading (h2)', tag: 'h2', ref: null },\n    { id: 'default2', html: 'This is a subheading (h3)', tag: 'h3', ref: null },\n    { id: 'default3', html: 'This is a paragraph', tag: 'p', ref: null }\n  ])\n  return (\n    <React.Fragment>\n      <div className='tutorial_container'>\n        <p>Open context menu by typing '/'</p>\n        <img width={200} src={exampleImage} alt='example' />\n      </div>\n      <EditablePage\n        value={value}\n        onChange={(result: BlockModel[]) => setValue(result)}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}